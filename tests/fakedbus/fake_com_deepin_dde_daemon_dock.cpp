/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -a fake_com_deepin_dde_daemon_dock -c FakeDaemonDock com.deepin.dde.daemon.Dock.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "fake_com_deepin_dde_daemon_dock.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

static QStringList dockedlist = {"/usr/share/applications/dde-file-manager.desktop",
                           "/usr/share/applications/deepin-album.desktop",
                           "/usr/share/applications/deepin-music.desktop",
                           "/usr/share/applications/deepin-contacts.desktop",
                           "/usr/share/applications/dde-calendar.desktop",
                           "/usr/share/applications/dde-control-center.desktop",
                           "/usr/share/applications/google-chrome.desktop",
                           "/usr/share/applications/org.qt-project.qtcreator.desktop",
                           "/usr/share/applications/com.syntevo.smartgit.desktop"};

/*
 * Implementation of adaptor class FakeDaemonDock
 */

FakeDaemonDock::FakeDaemonDock(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{

}

FakeDaemonDock::~FakeDaemonDock()
{
    // destructor
}

int FakeDaemonDock::displayMode() const
{
    // get the value of property DisplayMode
    return m_displayMode;
}

void FakeDaemonDock::setDisplayMode(int value)
{
    // set the value of property DisplayMode
    m_displayMode = value;
}

QStringList FakeDaemonDock::dockedApps() const
{
    // get the value of property DockedApps
    return qvariant_cast< QStringList >(parent()->property("DockedApps"));
}

QList<QDBusObjectPath> FakeDaemonDock::entries() const
{
    // get the value of property Entries
    static QList<QDBusObjectPath> pathList = {QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e0T6045b766")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e1T6045b766")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e2T6045b766")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e3T6045b766")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e4T6045b766")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e5T6045b766")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e6T6045b766")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e7T6045b766")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e8T6045b766")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e17T6045ba37")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e20T6045bdd4")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e22T6045bede")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e33T6045c648")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e43T6045cea2")
                                              , QDBusObjectPath("/com/deepin/dde/daemon/Dock/entries/e44T6045d157")
                                             };

    return pathList;
}

DockRect FakeDaemonDock::frontendWindowRect() const
{
    // get the value of property FrontendWindowRect

    return qvariant_cast< DockRect >(parent()->property("FrontendWindowRect"));
}

int FakeDaemonDock::hideMode() const
{
    // get the value of property HideMode
    return m_hideMode;
}

void FakeDaemonDock::setHideMode(int value)
{
    // set the value of property HideMode
    m_hideMode = value;
}

int FakeDaemonDock::hideState() const
{
    // get the value of property HideState
    return m_hideState;
}

uint FakeDaemonDock::hideTimeout() const
{
    return m_hideTimeout;
}

void FakeDaemonDock::setHideTimeout(uint value)
{
    m_hideTimeout = value;
}

uint FakeDaemonDock::iconSize() const
{
    // get the value of property IconSize
    return qvariant_cast< uint >(parent()->property("IconSize"));
}

void FakeDaemonDock::setIconSize(uint value)
{
    // set the value of property IconSize
    parent()->setProperty("IconSize", QVariant::fromValue(value));
}

double FakeDaemonDock::opacity() const
{
    return m_opacity;
}

void FakeDaemonDock::setOpacity(double value)
{
    m_opacity = value;
}

int FakeDaemonDock::position() const
{
    return m_position;
}

void FakeDaemonDock::setPosition(int value)
{
    m_position = value;
}

uint FakeDaemonDock::showTimeout() const
{
    // get the value of property ShowTimeout
    return qvariant_cast< uint >(parent()->property("ShowTimeout"));
}

void FakeDaemonDock::setShowTimeout(uint value)
{
    // set the value of property ShowTimeout
    parent()->setProperty("ShowTimeout", QVariant::fromValue(value));
}

uint FakeDaemonDock::windowSize() const
{
    return 40;
}

void FakeDaemonDock::setWindowSize(uint value)
{
    //TODO
}

uint FakeDaemonDock::windowSizeEfficient() const
{
    return 40;
}

void FakeDaemonDock::setWindowSizeEfficient(uint value)
{
    //TODO
}

uint FakeDaemonDock::windowSizeFashion() const
{
    return 40;
}

void FakeDaemonDock::setWindowSizeFashion(uint value)
{
    //TODO
}

void FakeDaemonDock::ActivateWindow(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.ActivateWindow
    QMetaObject::invokeMethod(parent(), "ActivateWindow", Q_ARG(uint, in0));
}

void FakeDaemonDock::CancelPreviewWindow()
{
    // handle method call com.deepin.dde.daemon.Dock.CancelPreviewWindow
    QMetaObject::invokeMethod(parent(), "CancelPreviewWindow");
}

void FakeDaemonDock::CloseWindow(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.CloseWindow
    QMetaObject::invokeMethod(parent(), "CloseWindow", Q_ARG(uint, in0));
}

QStringList FakeDaemonDock::GetDockedAppsDesktopFiles()
{
    return dockedlist;
}

QStringList FakeDaemonDock::GetEntryIDs()
{
    static QStringList list = {"dde-file-manager",
                               "deepin-album",
                               "deepin-music",
                               "deepin-contacts",
                               "dde-calendar",
                               "dde-control-center",
                               "google-chrome",
                               "org.qt-project.qtcreator",
                               "com.syntevo.smartgit",
                               "deepin-terminal",
                               "org.gnome.dfeet",
                               "wps-office-et",
                               "org.gnome.Terminal",
                               "code",
                               "ca.desrt.dconf-editor",
                               "deepin-editor"};
    return list;
}

QString FakeDaemonDock::GetPluginSettings()
{
    static QString str = "'{\"AiAssistant\":{\"pos_1\":1},\"datetime\":{\"Use24HourFormat\":true,\"pos_datetime_1\":3},\"disk-mount\":{\"holded_mount-item-key\":false},\"multitasking\":{\"pos_multitasking_1\":2},\"network\":{\"holded_network-item-key\":false},\"notifications\":{\"pos_notifications_1\":5},\"show-desktop\":{\"pos_show-desktop_1\":1},\"shutdown\":{\"pos_shutdown_1\":2},\"sound\":{\"holded_sound-item-key\":false},\"trash\":{\"pos_trash_1\":4},\"tray\":{\"fashion-tray-expanded\":true,\"holded_sni:fcitx-qimpanel\":false,\"holded_window:Deepin-WXWork\":false,\"holded_window:Deepin-WeChat\":false}}'";
    return str;
}

bool FakeDaemonDock::IsDocked(const QString &in0)
{
    return dockedlist.contains(in0);
}

bool FakeDaemonDock::IsOnDock(const QString &in0)
{
   return dockedlist.contains(in0);
}

void FakeDaemonDock::MakeWindowAbove(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.MakeWindowAbove
    QMetaObject::invokeMethod(parent(), "MakeWindowAbove", Q_ARG(uint, in0));
}

void FakeDaemonDock::MaximizeWindow(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.MaximizeWindow
    QMetaObject::invokeMethod(parent(), "MaximizeWindow", Q_ARG(uint, in0));
}

void FakeDaemonDock::MergePluginSettings(const QString &in0)
{
    // handle method call com.deepin.dde.daemon.Dock.MergePluginSettings
    QMetaObject::invokeMethod(parent(), "MergePluginSettings", Q_ARG(QString, in0));
}

void FakeDaemonDock::MinimizeWindow(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.MinimizeWindow
    QMetaObject::invokeMethod(parent(), "MinimizeWindow", Q_ARG(uint, in0));
}

void FakeDaemonDock::MoveEntry(int in0, int in1)
{
    // handle method call com.deepin.dde.daemon.Dock.MoveEntry
    QMetaObject::invokeMethod(parent(), "MoveEntry", Q_ARG(int, in0), Q_ARG(int, in1));
}

void FakeDaemonDock::MoveWindow(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.MoveWindow
    QMetaObject::invokeMethod(parent(), "MoveWindow", Q_ARG(uint, in0));
}

void FakeDaemonDock::PreviewWindow(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.PreviewWindow
    QMetaObject::invokeMethod(parent(), "PreviewWindow", Q_ARG(uint, in0));
}

QString FakeDaemonDock::QueryWindowIdentifyMethod(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.QueryWindowIdentifyMethod
    QString out0;
    QMetaObject::invokeMethod(parent(), "QueryWindowIdentifyMethod", Q_RETURN_ARG(QString, out0), Q_ARG(uint, in0));
    return out0;
}

void FakeDaemonDock::RemovePluginSettings(const QString &in0, const QStringList &in1)
{
    // handle method call com.deepin.dde.daemon.Dock.RemovePluginSettings
    QMetaObject::invokeMethod(parent(), "RemovePluginSettings", Q_ARG(QString, in0), Q_ARG(QStringList, in1));
}

bool FakeDaemonDock::RequestDock(const QString &in0, int in1)
{
    // handle method call com.deepin.dde.daemon.Dock.RequestDock
    bool out0;
    QMetaObject::invokeMethod(parent(), "RequestDock", Q_RETURN_ARG(bool, out0), Q_ARG(QString, in0), Q_ARG(int, in1));
    return out0;
}

bool FakeDaemonDock::RequestUndock(const QString &in0)
{
    // handle method call com.deepin.dde.daemon.Dock.RequestUndock
    bool out0;
    QMetaObject::invokeMethod(parent(), "RequestUndock", Q_RETURN_ARG(bool, out0), Q_ARG(QString, in0));
    return out0;
}

void FakeDaemonDock::SetFrontendWindowRect(int in0, int in1, uint in2, uint in3)
{
    // handle method call com.deepin.dde.daemon.Dock.SetFrontendWindowRect
    QMetaObject::invokeMethod(parent(), "SetFrontendWindowRect", Q_ARG(int, in0), Q_ARG(int, in1), Q_ARG(uint, in2), Q_ARG(uint, in3));
}

void FakeDaemonDock::SetPluginSettings(const QString &in0)
{
    // handle method call com.deepin.dde.daemon.Dock.SetPluginSettings
    QMetaObject::invokeMethod(parent(), "SetPluginSettings", Q_ARG(QString, in0));
}

