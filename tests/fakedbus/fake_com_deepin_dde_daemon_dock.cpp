/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -a fake_com_deepin_dde_daemon_dock -c FakeDaemonDock com.deepin.dde.daemon.Dock.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "fake_com_deepin_dde_daemon_dock.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class FakeDaemonDock
 */

FakeDaemonDock::FakeDaemonDock(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{

}

FakeDaemonDock::~FakeDaemonDock()
{
    // destructor
}

int FakeDaemonDock::displayMode() const
{
    // get the value of property DisplayMode
    return m_displayMode;
}

void FakeDaemonDock::setDisplayMode(int value)
{
    // set the value of property DisplayMode
    m_displayMode = value;
}

QStringList FakeDaemonDock::dockedApps() const
{
    // get the value of property DockedApps
    return qvariant_cast< QStringList >(parent()->property("DockedApps"));
}

QList<QDBusObjectPath> FakeDaemonDock::entries() const
{
    // get the value of property Entries
    return qvariant_cast< QList<QDBusObjectPath> >(parent()->property("Entries"));
}

DockRect FakeDaemonDock::frontendWindowRect() const
{
    // get the value of property FrontendWindowRect
    return qvariant_cast< DockRect >(parent()->property("FrontendWindowRect"));
}

int FakeDaemonDock::hideMode() const
{
    // get the value of property HideMode
    return qvariant_cast< int >(parent()->property("HideMode"));
}

void FakeDaemonDock::setHideMode(int value)
{
    // set the value of property HideMode
    parent()->setProperty("HideMode", QVariant::fromValue(value));
}

int FakeDaemonDock::hideState() const
{
    // get the value of property HideState
    return qvariant_cast< int >(parent()->property("HideState"));
}

uint FakeDaemonDock::hideTimeout() const
{
    // get the value of property HideTimeout
    return qvariant_cast< uint >(parent()->property("HideTimeout"));
}

void FakeDaemonDock::setHideTimeout(uint value)
{
    // set the value of property HideTimeout
    parent()->setProperty("HideTimeout", QVariant::fromValue(value));
}

uint FakeDaemonDock::iconSize() const
{
    // get the value of property IconSize
    return qvariant_cast< uint >(parent()->property("IconSize"));
}

void FakeDaemonDock::setIconSize(uint value)
{
    // set the value of property IconSize
    parent()->setProperty("IconSize", QVariant::fromValue(value));
}

double FakeDaemonDock::opacity() const
{
    // get the value of property Opacity
    return qvariant_cast< double >(parent()->property("Opacity"));
}

void FakeDaemonDock::setOpacity(double value)
{
    // set the value of property Opacity
    parent()->setProperty("Opacity", QVariant::fromValue(value));
}

int FakeDaemonDock::position() const
{
    // get the value of property Position
    return qvariant_cast< int >(parent()->property("Position"));
}

void FakeDaemonDock::setPosition(int value)
{
    // set the value of property Position
    parent()->setProperty("Position", QVariant::fromValue(value));
}

uint FakeDaemonDock::showTimeout() const
{
    // get the value of property ShowTimeout
    return qvariant_cast< uint >(parent()->property("ShowTimeout"));
}

void FakeDaemonDock::setShowTimeout(uint value)
{
    // set the value of property ShowTimeout
    parent()->setProperty("ShowTimeout", QVariant::fromValue(value));
}

uint FakeDaemonDock::windowSize() const
{
    // get the value of property WindowSize
    return qvariant_cast< uint >(parent()->property("WindowSize"));
}

void FakeDaemonDock::setWindowSize(uint value)
{
    // set the value of property WindowSize
    parent()->setProperty("WindowSize", QVariant::fromValue(value));
}

uint FakeDaemonDock::windowSizeEfficient() const
{
    // get the value of property WindowSizeEfficient
    return qvariant_cast< uint >(parent()->property("WindowSizeEfficient"));
}

void FakeDaemonDock::setWindowSizeEfficient(uint value)
{
    // set the value of property WindowSizeEfficient
    parent()->setProperty("WindowSizeEfficient", QVariant::fromValue(value));
}

uint FakeDaemonDock::windowSizeFashion() const
{
    // get the value of property WindowSizeFashion
    return qvariant_cast< uint >(parent()->property("WindowSizeFashion"));
}

void FakeDaemonDock::setWindowSizeFashion(uint value)
{
    // set the value of property WindowSizeFashion
    parent()->setProperty("WindowSizeFashion", QVariant::fromValue(value));
}

void FakeDaemonDock::ActivateWindow(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.ActivateWindow
    QMetaObject::invokeMethod(parent(), "ActivateWindow", Q_ARG(uint, in0));
}

void FakeDaemonDock::CancelPreviewWindow()
{
    // handle method call com.deepin.dde.daemon.Dock.CancelPreviewWindow
    QMetaObject::invokeMethod(parent(), "CancelPreviewWindow");
}

void FakeDaemonDock::CloseWindow(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.CloseWindow
    QMetaObject::invokeMethod(parent(), "CloseWindow", Q_ARG(uint, in0));
}

QStringList FakeDaemonDock::GetDockedAppsDesktopFiles()
{
    // handle method call com.deepin.dde.daemon.Dock.GetDockedAppsDesktopFiles
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "GetDockedAppsDesktopFiles", Q_RETURN_ARG(QStringList, out0));
    return out0;
}

QStringList FakeDaemonDock::GetEntryIDs()
{
    // handle method call com.deepin.dde.daemon.Dock.GetEntryIDs
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "GetEntryIDs", Q_RETURN_ARG(QStringList, out0));
    return out0;
}

QString FakeDaemonDock::GetPluginSettings()
{
    // handle method call com.deepin.dde.daemon.Dock.GetPluginSettings
    QString out0;
    QMetaObject::invokeMethod(parent(), "GetPluginSettings", Q_RETURN_ARG(QString, out0));
    return out0;
}

bool FakeDaemonDock::IsDocked(const QString &in0)
{
    // handle method call com.deepin.dde.daemon.Dock.IsDocked
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsDocked", Q_RETURN_ARG(bool, out0), Q_ARG(QString, in0));
    return out0;
}

bool FakeDaemonDock::IsOnDock(const QString &in0)
{
    // handle method call com.deepin.dde.daemon.Dock.IsOnDock
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsOnDock", Q_RETURN_ARG(bool, out0), Q_ARG(QString, in0));
    return out0;
}

void FakeDaemonDock::MakeWindowAbove(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.MakeWindowAbove
    QMetaObject::invokeMethod(parent(), "MakeWindowAbove", Q_ARG(uint, in0));
}

void FakeDaemonDock::MaximizeWindow(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.MaximizeWindow
    QMetaObject::invokeMethod(parent(), "MaximizeWindow", Q_ARG(uint, in0));
}

void FakeDaemonDock::MergePluginSettings(const QString &in0)
{
    // handle method call com.deepin.dde.daemon.Dock.MergePluginSettings
    QMetaObject::invokeMethod(parent(), "MergePluginSettings", Q_ARG(QString, in0));
}

void FakeDaemonDock::MinimizeWindow(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.MinimizeWindow
    QMetaObject::invokeMethod(parent(), "MinimizeWindow", Q_ARG(uint, in0));
}

void FakeDaemonDock::MoveEntry(int in0, int in1)
{
    // handle method call com.deepin.dde.daemon.Dock.MoveEntry
    QMetaObject::invokeMethod(parent(), "MoveEntry", Q_ARG(int, in0), Q_ARG(int, in1));
}

void FakeDaemonDock::MoveWindow(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.MoveWindow
    QMetaObject::invokeMethod(parent(), "MoveWindow", Q_ARG(uint, in0));
}

void FakeDaemonDock::PreviewWindow(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.PreviewWindow
    QMetaObject::invokeMethod(parent(), "PreviewWindow", Q_ARG(uint, in0));
}

QString FakeDaemonDock::QueryWindowIdentifyMethod(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.QueryWindowIdentifyMethod
    QString out0;
    QMetaObject::invokeMethod(parent(), "QueryWindowIdentifyMethod", Q_RETURN_ARG(QString, out0), Q_ARG(uint, in0));
    return out0;
}

void FakeDaemonDock::RemovePluginSettings(const QString &in0, const QStringList &in1)
{
    // handle method call com.deepin.dde.daemon.Dock.RemovePluginSettings
    QMetaObject::invokeMethod(parent(), "RemovePluginSettings", Q_ARG(QString, in0), Q_ARG(QStringList, in1));
}

bool FakeDaemonDock::RequestDock(const QString &in0, int in1)
{
    // handle method call com.deepin.dde.daemon.Dock.RequestDock
    bool out0;
    QMetaObject::invokeMethod(parent(), "RequestDock", Q_RETURN_ARG(bool, out0), Q_ARG(QString, in0), Q_ARG(int, in1));
    return out0;
}

bool FakeDaemonDock::RequestUndock(const QString &in0)
{
    // handle method call com.deepin.dde.daemon.Dock.RequestUndock
    bool out0;
    QMetaObject::invokeMethod(parent(), "RequestUndock", Q_RETURN_ARG(bool, out0), Q_ARG(QString, in0));
    return out0;
}

void FakeDaemonDock::SetFrontendWindowRect(int in0, int in1, uint in2, uint in3)
{
    // handle method call com.deepin.dde.daemon.Dock.SetFrontendWindowRect
    QMetaObject::invokeMethod(parent(), "SetFrontendWindowRect", Q_ARG(int, in0), Q_ARG(int, in1), Q_ARG(uint, in2), Q_ARG(uint, in3));
}

void FakeDaemonDock::SetPluginSettings(const QString &in0)
{
    // handle method call com.deepin.dde.daemon.Dock.SetPluginSettings
    QMetaObject::invokeMethod(parent(), "SetPluginSettings", Q_ARG(QString, in0));
}

